{
    "item_type": "paper",
    "title": "Chart Generation",
    "descriptions": [
        "Abstract:\n\nThis paper explores the application of chart generation in natural language processing, specifically in the context of parsing and generation. Chart parsing has been shown to be an effective method for parsing natural languages, and this paper investigates whether it can also be used for generation. The authors propose a chart-based generation algorithm that uses a similar framework to chart parsing, but with modifications to accommodate the differences between parsing and generation.\n\nThe algorithm uses a chart to store edges, which represent phrases or semantic expressions, and an agenda to manage the construction of new edges. The authors introduce the concept of internal and external indices, which are used to index edges and facilitate interactions between them. They also propose a modified procedure for creating active edges, which represents phrases that require completion.\n\nThe paper demonstrates the effectiveness of the chart-based generation algorithm through examples and discusses the advantages of using this approach, including improved efficiency and the ability to handle ambiguity. The authors also highlight the challenges and limitations of the algorithm, including the potential for exponential proliferation of edges and the need for careful management of indices.\n\nOverall, this paper contributes to the development of chart-based generation algorithms and provides insights into the application of chart parsing techniques to natural language generation. The proposed algorithm has the potential to improve the efficiency and effectiveness of generation systems, and the paper's discussion of the challenges and limitations of the approach provides a foundation for further research and development.",
        "This paper explores the application of chart parsing techniques to natural language generation. Chart parsing is a method traditionally used for parsing, which involves analyzing a sentence to identify its grammatical structure. The authors investigate whether chart parsing can be used as a uniform architecture for both parsing and generation, and whether it brings similar advantages to the generation process as it does to parsing.\n\nThe paper begins by introducing the concept of chart parsing and its four key ideas: inactive edges, active edges, algorithm schema, and indexing. It then discusses how these concepts can be applied to generation, with a focus on the challenges of generating sentences from logical forms. The authors propose a procedure for generating sentences using chart parsing, which involves creating edges that represent phrases and their corresponding semantics.\n\nThe paper also addresses the issue of computational complexity in generation, which can lead to an exponential number of possible sentences. To mitigate this, the authors introduce the concept of internal and external indices, which help to limit the proliferation of unnecessary edges. They also propose an indexing scheme that uses entities, or indices, as natural points of articulation in flat semantic structures.\n\nThe authors illustrate their modified procedure with examples, demonstrating how it can be used to generate sentences efficiently. They conclude that chart parsing can be a useful technique for natural language generation, offering advantages such as efficient parsing and generation, and the ability to handle ambiguity and uncertainty.\n\nOverall, this paper presents a novel approach to natural language generation using chart parsing techniques, and demonstrates its potential for efficient and effective sentence generation. The proposed procedure and indexing scheme offer a promising solution to the challenges of generation, and the paper contributes to the ongoing research in this field.",
        "This academic paper explores the concept of chart generation, a technique traditionally used in parsing, and its potential application to natural language generation. The authors examine the suitability of chart parsing as a uniform architecture for both parsing and generation, highlighting its advantages in handling ambiguity and efficiency.\n\nThe paper delves into the details of chart parsing, discussing the concepts of inactive and active edges, the algorithm schema, and indexing. It then applies these concepts to generation, demonstrating how chart generation can be used to produce sentences from logical forms. The authors also address the issue of computational complexity, proposing strategies to enhance efficiency through indexing.\n\nThe paper introduces the notion of internal and external indices, which play a crucial role in controlling the generation process. It also presents a modified procedure for chart generation, which utilizes active and inactive edges to represent phrases and their interactions. The authors illustrate this procedure with examples, showcasing its ability to generate sentences while handling complex semantic structures.\n\nOverall, the paper contributes to the development of a unified framework for parsing and generation, demonstrating the potential of chart generation as a powerful tool for natural language processing. The proposed approach offers a promising solution for efficient and effective generation of sentences from logical forms, with potential applications in areas such as machine translation, text summarization, and dialogue systems.\n\nAbstract (approx. 150 words):\nThis paper explores the application of chart parsing to natural language generation, examining its suitability as a uniform architecture for both parsing and generation. The authors discuss the concepts of inactive and active edges, algorithm schema, and indexing, and demonstrate how chart generation can be used to produce sentences from logical forms. They propose strategies to enhance efficiency through indexing and introduce the notion of internal and external indices to control the generation process. The paper presents a modified procedure for chart generation, utilizing active and inactive edges to represent phrases and their interactions. The approach offers a promising solution for efficient and effective generation of sentences from logical forms, with potential applications in areas such as machine translation and dialogue systems.",
        "This academic paper explores the concept of chart generation, a technique used in natural language processing for parsing and generating sentences. The authors discuss the advantages of chart parsing, including its ability to handle ambiguity and its efficiency in terms of computational complexity. They also introduce the idea of chart generation, which involves using chart parsing techniques to generate sentences from logical forms.\n\nThe paper outlines an algorithm schema for chart generation, which involves creating edges in a chart to represent phrases and their corresponding semantics. The authors discuss the importance of indexing in chart generation, which allows for efficient access to edges in the chart. They propose a modified procedure for chart generation that uses indices to collect sets of edges that could interact, making the process more efficient.\n\nThe authors also address the issue of exponential proliferation of phrases containing modifiers, which can lead to an exponential increase in computational complexity. They propose a strategy to limit this proliferation by only allowing the maximal phrase to be incorporated into larger phrases.\n\nOverall, the paper presents a novel approach to chart generation, which has the potential to improve the efficiency and effectiveness of natural language processing systems. The authors demonstrate the applicability of their approach through examples and discuss the implications of their work for the field of natural language processing.\n\nAbstract:\n\nThis paper presents a novel approach to chart generation, a technique used in natural language processing for generating sentences from logical forms. The authors propose an algorithm schema for chart generation, which involves creating edges in a chart to represent phrases and their corresponding semantics. They also introduce a modified procedure that uses indices to collect sets of edges that could interact, making the process more efficient. The paper addresses the issue of exponential proliferation of phrases containing modifiers and proposes a strategy to limit this proliferation. The approach has the potential to improve the efficiency and effectiveness of natural language processing systems.",
        "Here is an abstract for the provided academic paper:\n\nTitle: Chart Generation: A Uniform Architecture for Parsing and Generation\n\nAbstract:\nThis paper explores the application of chart parsing to natural language generation, with a focus on whether chart parsing can provide a uniform architecture for both parsing and generation. Chart parsing is a well-established technique for parsing natural language, which represents the input string as a chart and uses edges to encode parsed phrases. The authors argue that chart parsing can be adapted for generation by treating the input as a semantic representation and using edges to encode generated phrases. The paper presents an algorithm schema for chart generation, which involves creating active and inactive edges to represent phrases and their interactions. The authors also discuss the importance of indexing in chart generation, proposing a scheme that uses indices to collect sets of edges that could interact. The paper concludes that chart generation can provide a unified architecture for parsing and generation, with potential advantages in terms of efficiency and flexibility. The proposed approach is illustrated with examples, including the generation of sentences from semantic representations. Overall, the paper contributes to the development of a unified theory of natural language processing, highlighting the potential of chart parsing as a foundation for both parsing and generation.",
        "This academic paper explores the concept of chart generation, a parsing technique used in natural language processing, and its potential application to generation tasks. The authors argue that chart parsing can be used as a uniform architecture for both parsing and generation, and they investigate the extent to which it can bring advantages to the generation process.\n\nThe paper begins by introducing the basic concepts of chart parsing, including inactive and active edges, and the algorithm schema used to construct edges. It then discusses the application of chart parsing to generation, where the goal is to produce a sentence from a given logical form or semantic representation.\n\nThe authors propose a generation algorithm that uses a chart to store the edges, which represent the phrases and their corresponding semantic representations. They discuss the importance of indexing in chart parsing and how it can be applied to generation. The paper also explores the concept of internal and external indices, which are used to limit the proliferation of edges and improve the efficiency of the generation process.\n\nThe authors propose a modified procedure for chart generation that uses active and inactive edges, which interact by virtue of shared indices. They illustrate the procedure with an example sentence and demonstrate how the chart is constructed and used to generate the sentence.\n\nOverall, the paper presents a novel approach to generation using chart parsing and demonstrates its potential advantages in terms of efficiency and flexibility. The authors conclude that chart generation can be a useful tool for natural language generation tasks and provide a foundation for further research in this area.\n\nAbstract:\nThis paper explores the application of chart parsing to generation tasks, proposing a novel approach to generating sentences from logical forms or semantic representations. The authors introduce a generation algorithm that uses a chart to store edges representing phrases and their corresponding semantic representations. They discuss the importance of indexing and propose a modified procedure using active and inactive edges that interact by virtue of shared indices. The paper demonstrates the potential advantages of chart generation in terms of efficiency and flexibility, providing a foundation for further research in natural language generation."
    ],
    "origin": "LLM",
    "llm_engine": "together-meta-llama/Llama-3.3-70B-Instruct-Turbo",
    "generation_prompt_uid": "8fba0fea06294e0ddf5763c995f33bd6",
    "generation_prompt_nickname": "write_xml_paper_abstract_control_word_count",
    "generation_prompt_text": "Read the following academic paper provided in XML format and create an abstract for it.\n\nPlease limit the response to 2879 words or less.\n\n---\n\n**Description:**\n\n<PAPER>\n  <S sid=\"0\">Chart Generation</S>\n  <SECTION title=\"1 Charts\" number=\"1\">\n    <S sid=\"104\" ssid=\"1\">Shieber (1988) showed that parsing charts can be also used in generation and raised the question, which we take up again here, of whether they constitute a natural uniform architecture for parsing and generation.</S>\n    <S sid=\"105\" ssid=\"2\">In particular, we will be interested in the extent to which they bring to the generation process advantages comparable to those that make them attractive in parsing.</S>\n    <S sid=\"106\" ssid=\"3\">Chart parsing is not a well defined notion.</S>\n    <S sid=\"107\" ssid=\"4\">The usual conception of it involves at least four related ideas: Inactive edges.</S>\n    <S sid=\"108\" ssid=\"5\">In context-free grammar, all phrases of a given category that cover a given part of the string are equivalent for the purposes of constructing larger phrases.</S>\n    <S sid=\"109\" ssid=\"6\">Efficiency comes from collecting equivalent sets of phrases into (inactive) edges and constructing edges from edges rather than phrases from phrases.</S>\n    <S sid=\"110\" ssid=\"7\">Active edges.</S>\n    <S sid=\"111\" ssid=\"8\">New phrases of whatever size can be built by considering existing edges pair-wise if provision is made for partial phrases.</S>\n    <S sid=\"112\" ssid=\"9\">Partial phrases are collected into edges that are said to be active because they can be thought of as actively seeking material to complete them.</S>\n    <S sid=\"113\" ssid=\"10\">The algorithm schema.</S>\n    <S sid=\"114\" ssid=\"11\">Newly created edges are placed on an agenda.</S>\n    <S sid=\"115\" ssid=\"12\">Edges are moved from the agenda to the chart one by one until none remains to be moved.</S>\n    <S sid=\"116\" ssid=\"13\">When an edge is moved, all interactions between it and edges already in the chart are considered and any new edges that they give rise to are added to the agenda.</S>\n    <S sid=\"117\" ssid=\"14\">Indexing.</S>\n    <S sid=\"118\" ssid=\"15\">The positions in the string at which phrases begin and end can be used to index edges so that the algorithm schema need consider interactions only between adjacent pairs.</S>\n    <S sid=\"119\" ssid=\"16\">Chart parsing is attractive for the analysis of natural languages, as opposed to programming languages, for the way in which it treats ambiguity.</S>\n    <S sid=\"120\" ssid=\"17\">Regardless of the number of alternative structures for a particular string that a given phrase participates in, it will be constructed once and only once.</S>\n    <S sid=\"121\" ssid=\"18\">Although the number of structures of a string can grow exponentially with the length of the string, the number of edges that needs to be constructed grows only with the square of the string length and the whole parsing process can be accomplished in cubic time.</S>\n    <S sid=\"122\" ssid=\"19\">Innumerable variants of the basic chart parsing scheme are possible.</S>\n    <S sid=\"123\" ssid=\"20\">For example, if there were languages with truly free word order, we might attempt to characterize them by rules like those of context-free grammar, but with a somewhat different interpretation.</S>\n    <S sid=\"124\" ssid=\"21\">Instead of replacing nonterminal symbols in a derivation with strings from the righthand side of corresponding rules, we would remove the nonterminal symbol and insert the symbols from the righthand side of the rule at arbitrary places in the string.</S>\n    <S sid=\"125\" ssid=\"22\">A chart parser for languages with free word order would be a minor variant of the standard one.</S>\n    <S sid=\"126\" ssid=\"23\">An edge would take the form where v is a vector with a bit for every word in the string and showing which of those words the edge covers.</S>\n    <S sid=\"127\" ssid=\"24\">There is no longer any notion of adjacency so that there would be no indexing by string position.</S>\n    <S sid=\"128\" ssid=\"25\">Interesting interactions occur between pairs of edges whose bit vectors have empty intersections, indicating that they cover disjoint sets of words.</S>\n    <S sid=\"129\" ssid=\"26\">There can now be as many edges as bit-vectors and, not surprisingly, the computational complexity of the parsing process increases accordingly.</S>\n  </SECTION>\n  <SECTION title=\"2 Generation\" number=\"2\">\n    <S sid=\"130\" ssid=\"1\">A parser is a transducer from strings to structures or logical forms.</S>\n    <S sid=\"131\" ssid=\"2\">A generator, for our purposes, is the inverse.</S>\n    <S sid=\"132\" ssid=\"3\">One way to think of it, therefore, is as a parser of structures or logical forms that delivers analyses in the form of strings.</S>\n    <S sid=\"133\" ssid=\"4\">This view has the apparent disadvantage of putting insignificant differences in the syntax of a logical forms, such as the relative order of the arguments to symmetric operators, on the same footing as more significant facts about them.</S>\n    <S sid=\"134\" ssid=\"5\">We know that it will not generally be possible to reduce logical expressions to a canonical form but this does not mean that we should expect our generator to be compromised, or even greatly delayed, by trivial distinctions.</S>\n    <S sid=\"135\" ssid=\"6\">Considerations of this kind were, in part, responsible for the recent resurgence of interest in &amp;quot;flat&amp;quot; representations of logical form (Copestake et a/.,I 996) and for the representations used for transfer in Shake-and-Bake translation (Whitelock, 1992).</S>\n    <S sid=\"136\" ssid=\"7\">They have made semantic formalisms like those now usually associated with Davison (Davidson, 1980, Parsons, 1990) attractive in artificial intelligence for many years (Hobbs 1985, Kay, 1970).</S>\n    <S sid=\"137\" ssid=\"8\">Operationally, the attraction is that the notations can be analyzed largely as free word-order languages in the manner outlined above.</S>\n    <S sid=\"138\" ssid=\"9\">Consider the expression (I) which we will take as a representation of the logical form of the sentences John ran fast and John ran quickly.</S>\n    <S sid=\"139\" ssid=\"10\">It consists of a distinguished index (r) and a list of predicates whose relative order is immaterial.</S>\n    <S sid=\"140\" ssid=\"11\">The distinguished index identifies this as a sentence that makes a claim about a running event.</S>\n    <S sid=\"141\" ssid=\"12\">&amp;quot;John&amp;quot; is the name of the entity that stands in the `argl ' relation to the running which took place in the past and which was fast.</S>\n    <S sid=\"142\" ssid=\"13\">Nothing turns on these details which will differ with differing ontologies, logics, and views of semantic structure.</S>\n    <S sid=\"143\" ssid=\"14\">What concerns us here is a procedure for generating a sentence from a structure of this general kind.</S>\n    <S sid=\"144\" ssid=\"15\">Assume that the lexicon contains entries like those in A prima facie argument for the utility of these particular words for expressing ( I) can be made simply by noting that, modulo appropriate instantiation of the variables, the semantics of each of these words subsumes (1).</S>\n  </SECTION>\n  <SECTION title=\"3 The Algorithm Schema\" number=\"3\">\n    <S sid=\"145\" ssid=\"1\">The entries in (2), with their variables suitably instantiated, become the initial entries of an agenda and we begin to move them to the chart in accordance with the algorithm schema, say in the order given.</S>\n    <S sid=\"146\" ssid=\"2\">The variables in the 'Cat' and 'Semantics' columns of (2) provide the essential link between syntax and semantics.</S>\n    <S sid=\"147\" ssid=\"3\">The predicates that represent the semantics of a phrase will simply be the union of those representing the constituents.</S>\n    <S sid=\"148\" ssid=\"4\">The rules that sanction a phrase (e.g.</S>\n    <S sid=\"149\" ssid=\"5\">(3) below) show which variables from the two parts are to be identified.</S>\n    <S sid=\"150\" ssid=\"6\">When the entry for John is moved, no interactions are possible because the chart is empty.</S>\n    <S sid=\"151\" ssid=\"7\">When run is moved, the sequence John ran is considered as a possible phrase on the basis of rule (3).</S>\n    <S sid=\"152\" ssid=\"8\">With appropriate replacements for variables, this maps onto the subset (4) of the original semantic specification in (1).</S>\n    <S sid=\"153\" ssid=\"9\">Furthermore it is a complete sentence.</S>\n    <S sid=\"154\" ssid=\"10\">However, it does not count as an output to the generation process as a whole because it subsumes some but not all of (1).</S>\n    <S sid=\"155\" ssid=\"11\">It therefore simply becomes a new edge on the agenda.</S>\n    <S sid=\"156\" ssid=\"12\">The string ran fast constitutes a verb phrase by virtue of rule (5) giving the semantics (6), and the phrase ran quickly with the same semantics is put on the agenda when the quickly edge is move to the chart.</S>\n    <S sid=\"157\" ssid=\"13\">Assuming that adverbs modify verb phrases and not sentences, there will be no interactions when the John ran edge is moved to the chart.</S>\n    <S sid=\"158\" ssid=\"14\">When the edge for ran fast is moved, the possibility arises of creating the phrase ran fast quickly as well as ran fast fast.</S>\n    <S sid=\"159\" ssid=\"15\">Both are rejected, however, on the grounds that they would involve using a predicate from the original semantic specification more than once.</S>\n    <S sid=\"160\" ssid=\"16\">This would be similar to allowing a given word to be covered by overlapping phrases in free word-order parsing.</S>\n    <S sid=\"161\" ssid=\"17\">We proposed eliminating this by means of a bit vector and the same technique applies here.</S>\n    <S sid=\"162\" ssid=\"18\">The fruitful interactions that occur here are between ran fast and ran quickly on the one hand, and John on the other.</S>\n    <S sid=\"163\" ssid=\"19\">Both give sentences whose semantics subsumes the entire input.</S>\n    <S sid=\"164\" ssid=\"20\">Several things are noteworthy about the process just outlined.</S>\n    <S sid=\"165\" ssid=\"21\">Points 4 and 5 are serious flaws in our scheme for which we shall describe remedies.</S>\n    <S sid=\"166\" ssid=\"22\">Point 2 will have some importance for us because it will turn out that the indexing scheme we propose will require the use of distinct active and inactive edges, even when the rules are all binary.</S>\n    <S sid=\"167\" ssid=\"23\">We take up the complexity issue first, and then turn to how the efficiency of the generation chart might be enhanced through indexing.</S>\n  </SECTION>\n  <SECTION title=\"4 Internal and External Indices\" number=\"4\">\n    <S sid=\"168\" ssid=\"1\">The exponential factor in the computational complexity of our generation algorithm is apparent in an example like (8).</S>\n    <S sid=\"169\" ssid=\"2\">(8) Newspaper reports said the tall young Polish athlete ran fast The same set of predicates that generate this sentence clearly also generate the same sentence with deletion of all subsets of the words tall, young. and Polish for a total of 8 strings.</S>\n    <S sid=\"170\" ssid=\"3\">Each is generated in its entirety, though finally rejected because it fails to account for all of the semantic material.</S>\n    <S sid=\"171\" ssid=\"4\">The words newspaper and fast can also be deleted independently giving a grand total of 32 strings.</S>\n    <S sid=\"172\" ssid=\"5\">We concentrate on the phrase tall young Polish athlete which we assumed would be combined with the verb phrase ran fast by the rule (3).</S>\n    <S sid=\"173\" ssid=\"6\">The distinguished index of the noun phrase, call it p, is identified with the variable y in the rule, but this variable is not associated with the syntactic category, s, on the left-hand side of the rule.</S>\n    <S sid=\"174\" ssid=\"7\">The grammar has access to indices only through the variables that annotate grammatical categories in its rules, so that rules that incorporate this sentence into larger phrases can have no further access to the index p. We therefore say that p is internal to the sentence the tall young Polish athlete ran fast.</S>\n    <S sid=\"175\" ssid=\"8\">The index p would, of course, also be internal to the sentences the young Polish athlete ran fast, the tall Polish athlete ran fast, etc.</S>\n    <S sid=\"176\" ssid=\"9\">However, in these cases, the semantic material remaining to be expressed contains predicates that refer to this internal index, say tall(p)' , and `young(p)'.</S>\n    <S sid=\"177\" ssid=\"10\">While the lexicon may have words to express these predicates, the grammar has no way of associating their referents with the above noun phrases because the variables corresponding to those referents are internal.</S>\n    <S sid=\"178\" ssid=\"11\">We conclude that, as a matter of principle, no edge should be constructed if the result of doing so would be to make internal an index occurring in part of the input semantics that the new phrase does not subsume.</S>\n    <S sid=\"179\" ssid=\"12\">In other words, the semantics of a phrase must contain all predicates from the input specification that refer to any indices internal to it.</S>\n    <S sid=\"180\" ssid=\"13\">This strategy does not prevent the generation of an exponential number of variants of phrases containing modifiers.</S>\n    <S sid=\"181\" ssid=\"14\">It limits proliferation of the ill effects, however, by allowing only the maximal one to be incorporated in larger phrases.</S>\n    <S sid=\"182\" ssid=\"15\">In other words, if the final result has phrases with m and n modifiers respectively, then 2' versions of the first and 211' of the second will be created, but only one of each set will be incorporated into larger phrases and no factor of 2'14-no will be introduced into the cost of the process.</S>\n  </SECTION>\n  <SECTION title=\"5 Indexing\" number=\"5\">\n    <S sid=\"183\" ssid=\"1\">String positions provide a natural way to index the strings input to the parsing process for the simple reason that there are as many of them as there are words but, for there to be any possibility of interaction between a pair of edges, they must come together at just one index.</S>\n    <S sid=\"184\" ssid=\"2\">These are the natural points of articulation in the domain of strings.</S>\n    <S sid=\"185\" ssid=\"3\">They cannot fill this role in generation because they are not natural properties of the semantic expressions that are the input to the process.</S>\n    <S sid=\"186\" ssid=\"4\">The corresponding natural points of articulation in flat semantic structures are the entities that we have already been referring to as indices.</S>\n    <S sid=\"187\" ssid=\"5\">In the modified version of the procedure, whenever a new inactive edge is created with label B(b ...). then for all rules of the form in (9), an active edge is also created with label A(...)/C(c ...).</S>\n    <S sid=\"188\" ssid=\"6\">This represents a phrase of category A that requires a phrase of category Con the right for its completion.</S>\n    <S sid=\"189\" ssid=\"7\">In these labels, b and c are (variables representing) the first, or distinguished indices associated with B and C. By analogy with parsing charts, an inactive edge labeled B(b ...) can be thought of as incident from vertex b, which means simply that it is efficiently accessible through the index b.</S>\n    <S sid=\"190\" ssid=\"8\">An active edge A(...)IC(c ...) should be thought of as incident from, or accessible through, the index c. The key property of this scheme is that active and inactive edges interact by virtue of indices that they share and, by letting vertices correspond to indices, we collect together sets of edges that could interact.</S>\n    <S sid=\"191\" ssid=\"9\">We illustrate the modified procedure with the sentence The procedure will be reminiscent of left-corner parsing.</S>\n    <S sid=\"192\" ssid=\"10\">Arguments have been made in favor of a head-driven strategy which would, however, have been marginally more complex (e.g. in Kay (1989), Shieber, et el.</S>\n    <S sid=\"193\" ssid=\"11\">(1989)) and the differences are, in any case, not germane to our current concerns.</S>\n    <S sid=\"194\" ssid=\"12\">The initial agenda, including active edges, and collecting edges by the vertices that they are incident from, is given in (16).</S>\n    <S sid=\"195\" ssid=\"13\">The grammar is consulted only for the purpose of creating active edges and all interactions in the chart are between active and inactive pairs of edges incident from the d the dog np(d) d: dog(d), def(d) saw the vp(s, d)/np(d) s: see(s), past(s), cat argl(s, d), arg2(s, c), cat(c), def(c) c the cat np(c) c: cat(c), def(c) s saw the vp(s, d) s: see(s), past(s), cat argl(s, d), arg2(s, c), cat(c), def(c) Among the edges in (16), there are two interactions, one at vertices c and d. They cause the first and third edges in (17) to be added to the agenda.</S>\n    <S sid=\"196\" ssid=\"14\">The first interacts with the active edge originally introduced by the verb &amp;quot;saw&amp;quot; producing the fourth entry in (17).</S>\n    <S sid=\"197\" ssid=\"15\">The label on this edge matches the first item on the right-hand side of rule (12) and the active edge that we show in the second entry is also introduced.</S>\n    <S sid=\"198\" ssid=\"16\">The final interaction is between the first and second edges in (17) which give rise to the edge in (18).</S>\n    <S sid=\"199\" ssid=\"17\">This procedure confirms perfectly to the standard algorithm schema for chart parsing, especially in the version that makes predictions immediately following the recognition of the first constituent of a phrase, that is, in the version that is essentially a caching left-corner parser.</S>\n  </SECTION>\n</PAPER>"
}