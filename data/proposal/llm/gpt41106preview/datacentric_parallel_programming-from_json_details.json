{
    "item_type": "proposal",
    "title": "Data-centric Parallel Programming",
    "descriptions": [
        "Abstract:\n\nThe advent of large-scale heterogeneous parallel computers has ushered in a new era of scientific possibilities in fields ranging from drug design to weather prediction and big data analytics. However, the programming of these complex systems poses a significant challenge: efficiently mapping data to the target memory system for a range of computing platforms, from quad-core laptops to million-core supercomputers. With data access costs rising in tandem with the degree of parallelism, the need for optimization in data layout is more crucial than ever. The current control-centric programming model falls short in addressing this need, leading to a potential \"scaling wall\" that could severely limit future computational capabilities.\n\nOur proposal, titled \"Data-centric Parallel Programming,\" aims to revolutionize the programming paradigm for parallel computing by introducing a data-centric approach to program formulation. We propose representing programs as collections of values, termed \"memlets,\" which are treated as first-class objects by a holistic compiler and runtime system. This system is designed to handle complex heterogeneous target architectures through a unique blend of static and dynamic scheduling of memlets. By rethinking data mapping and access, our approach addresses the notorious difficulty of data mapping and aims to break through the scaling wall that current abstractions cannot circumvent.\n\nThe system's efficacy will be demonstrated through applications in scientific computing, data analytics, and graph processing. By advancing the state of the art in parallel computing, this data-centric model promises to unlock a new level of performance and efficiency, ensuring that our computational abilities continue to grow in line with technological advancements. The outcome of this project has the potential to provide a fundamental shift in how large-scale computational problems are approached, ultimately impacting a wide range of computationally intensive applications."
    ],
    "origin": "LLM",
    "llm_engine": "gpt-4-1106-preview",
    "generation_prompt_uid": "a94a903661e1466b4aacbb51b3a23479",
    "generation_prompt_nickname": "from_json_details",
    "generation_prompt_text": "Write an abstract for a grant proposal based on the following details provided in JSON format. The JSON includes the title and key characteristics of the proposed project.\n\nPlease limit the response to 273 words or less.\n\n---\n\n**Description:**\n\n{'proposal_name': 'Data-centric Parallel Programming', 'proposal_details': {'challenge_addressed': 'programming large-scale heterogeneous parallel computers', 'applications': ['drug design', 'weather prediction', 'big data analytics'], 'architectural_trends': ['heterogeneous parallel processors', 'quad-core laptops', 'million-core supercomputers'], 'importance': ['efficient exploitation of architectures', 'technological advancement'], 'problem_nature': 'computationally demanding problems are inherently parallel', 'compilation_target': 'various architectures', 'difficulty': 'efficiently mapping data to the target memory system', 'data_access_cost': 'growing with the amount of parallelism', 'optimization_importance': 'data layout', 'current_paradigm': 'control-centric model', 'proposed_solution': {'approach': 'data-centric program formulation', 'program_representation': 'collections of values called memlets', 'system_role': 'mapped as first-class objects by the compiler and runtime system'}, 'system_goals': ['advance the state of the art in parallel computing', 'combine static and dynamic scheduling of memlets', 'handle complex heterogeneous target architectures'], 'demonstration_applications': ['scientific computing', 'data analytics', 'graph processing'], 'conclusion': 'holistic data-centric programming is essential to avoid scaling wall in computational capabilities'}}\n\n**Description:**\n\n{'proposal_name': 'Data-centric Parallel Programming', 'proposal_details': {'challenge': 'programming large-scale heterogeneous parallel computers', 'importance': ['drug design', 'weather prediction', 'big data analytics'], 'architectural_trends': 'heterogeneous parallel processors', 'computing_platforms': ['quad-core laptops', 'million-core supercomputers'], 'parallel_problems': 'inherently parallel', 'data_mapping_difficulty': 'notoriously hard', 'data_access_cost': 'growing with the amount of parallelism', 'data_layout_optimizations': 'crucial', 'current_paradigm': 'control-centric model', 'proposed_solution': 'data-centric program formulation', 'program_representation': 'collections of values (memlets)', 'compiler_runtime_system': 'holistic', 'scheduling': ['static', 'dynamic'], 'target_architectures': 'complex heterogeneous', 'applications_demonstrated': ['scientific computing', 'data analytics', 'graph processing'], 'consequence_without_solution': 'scaling wall limiting computational capabilities', 'descriptions': ['Our holistic compiler and runtime system aims to substantially advance the state of the art in parallel computing by combining static and dynamic scheduling of memlets to complex heterogeneous target architectures.']}}\n\n**Description:**\n\n{'proposal_name': 'Data-centric Parallel Programming', 'proposal_details': {'challenge': 'programming large-scale heterogeneous parallel computers', 'applications': ['drug design', 'weather prediction', 'big data analytics'], 'computing_platforms_range': ['quad-core laptops', 'million-core supercomputers'], 'problem': 'mapping data to target memory system', 'data_access_cost': 'growing with amount of parallelism', 'current_abstractions': 'ignore data access', 'approach': 'data-centric program formulation', 'memlets': 'collections of values mapped by compiler and runtime system', 'system_features': ['static and dynamic scheduling', 'complex heterogeneous target architectures'], 'applications_demonstrated': ['scientific computing', 'data analytics', 'graph processing'], 'descriptions': ['Holistic data-centric programming is crucial to prevent a scaling wall in future computational capabilities.']}}"
}